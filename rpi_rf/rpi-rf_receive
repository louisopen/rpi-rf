#!/usr/bin/env python3
#sudo pip3 install rpi-rf

import argparse
import signal
import sys
import time
import logging

from rpi_rf import RFDevice

rfdevice = None

# pylint: disable=unused-argument
def exithandler(signal, frame):
    rfdevice.cleanup()
    sys.exit(0)

logging.basicConfig(level=logging.INFO, datefmt='%Y-%m-%d %H:%M:%S',
                    format='%(asctime)-15s - [%(levelname)s] %(module)s: %(message)s', )

parser = argparse.ArgumentParser(description='Receives a decimal code via a 433/315MHz GPIO device')
parser.add_argument('-g', dest='gpio', type=int, default=27,
                    help="GPIO pin (Default: 27)")
args = parser.parse_args()

signal.signal(signal.SIGINT, exithandler)
rfdevice = RFDevice(args.gpio)
rfdevice.enable_rx()
timestamp = None
logging.info("Listening for codes on GPIO " + str(args.gpio))
while True:
    if rfdevice.rx_code_timestamp != timestamp:
        timestamp = rfdevice.rx_code_timestamp
        
        logging.info(hex(rfdevice.rx_code) +
                     " [pulselength " + str(rfdevice.rx_pulselength) +
                     ", BitLength " + str(rfdevice.rx_bitlength) +
                     ", protocol " + str(rfdevice.rx_proto) + "]")
        
        temp = rfdevice.rx_code&0xfff60000  #used 2bit for group
        if(temp==0x33300000) or (temp==0x33320000) or (temp==0x33340000) or (temp==0x33360000): #ID 4 sets for same application
            if((rfdevice.rx_code&0x00010000) > 0):  #sign "-"
                temp=0.0-(rfdevice.rx_code&0x0000ffff)/10
            else:
                temp=(rfdevice.rx_code&0x0000ffff)/10
                
            logging.info(str(temp))
            '''
            logging.info(str(temp) +
                        " [pulselength " + str(rfdevice.rx_pulselength) +
                        ", BitLength " + str(rfdevice.rx_bitlength) +
                        ", protocol " + str(rfdevice.rx_proto) + "]")
            '''
            
    time.sleep(0.01)
rfdevice.cleanup()